

// All numbers up to N, find the primes

total operations of that first algorithm

Alg(1):
N       2 | 3 | 4 | 5 | 6 | 7 | ... | N 
-----------------------------------------
# loops 2 | 3 | 4 | 5 | 6 | 7 | ... | N 

2 + 3 + 4 + 5 + 6 + 7 + ... + N
(N + 2) + ((N - 1) + 3) + ((N-) + 4)+ ...
 N + 2      N + 2           N + 2

(N-1)/2 (N + 2) = (N^2 + N -2) / 2 = N^2 + N -1 = Θ(N^2)

Alg (2): goes to (N)^(1/2) so Θ(N * (N)^(1/2)) = Θ(N)^(3/2) which is less than ^2

so...

for (i = 2; i<=N; i++) {
    if (Not Marked) 
        i is prime;
    for (j = i*2; j<=N; j+= i) {
        mark the value j;
    }
}

Harmonic Series:
N(1/1 + 1/2 + 1/3 + ... + 1/N) = Θ(log(N))


Log tricks for Big O:
----------------------
* log(N) ε O(N^(0.000000001)) = True
* log_2(N) = log_2(10) * log_10(N)
* so...
    log_n(N) ε Θ(log_a(N))

Best vs Avg vs Worst Case...
(Eg): 
Linear Search: useful if data is unsorted
---------------

Worst:  Θ(N) comparisons wehre N is the # of entries
        I want to lookup L words (possibly identical) in an 
        unsorted list of N words

Best:   All L words are the first word - Θ(L) comparisons

Worst:  Θ(L * N) comparisons
        Not N^2 NOOOOO!!!! 

Avg:    Σ prob * value
        1 lookup avg:
            # of positions = N
            prob at:
            1) 1/N     Compares 1
            2) 1/N     Compares 2
            3) 1/N     Compares 3
        so ... Σ = (1/N * 1) + (1/N * 2) + (1/N * 3) + ... + (1/N * N)
                 = 1/N (1 + 2 + 3 + .... + N )
                 = 1/N * (N+1) * N/2
                 = Θ(N)

Lookups Θ(N * L) on average


Random Search:
----------------

guess where the value is at if there halt otherwise repeat, N words in List

Best: Θ(1)    AVG: A = 1/N(1) + (N-1)/N * (1 + A)           Worst: DNH (Does Not Halt)
                   A - (N-1/N * A) = (1 + (N-1))/N * (1)
                   (N/N - (N-1)/N)A = 1
                   (1/N)A = 1
                   A = N


Amortization: might look bad at one point, overall in end, not actually bad runtime
    if the list is full
        resizes Array(Doubled Cap)
    put element at the end
    update size

Best: θ(1)   Avg: θ(1)   Worst: Θ(Ν) where N is # of elements in list

Algorithm takes O(N^2)
    Operations
    N = 1000    time is 2 seconds

    if N = 10,000 how many seconds does this take?
        Time = Rate * #operations
        2s = R * C(1000)^2
        2s/(1000)^2 = RC
        Time = RC(10,000)^2
        Time = 2s/(1000)^2 * (10,000)^2 
        Time = 2s(10)^2 = 200s


Recursive: Function/Data Structure/ Relations
    defined using themself

    Fibonacci sequence = 1,1,2,3,5,8,13,21
                         0 1 2 3 4 5 6 7 8
    *This will seg fault*
    ---------------------
    int f(int x) {
        return f(x-1) + f(x-2);
    }

    correct using Recursion:
    --------------------------
    int f(int x) {
        if (x == 0 || x == 1)
            return 1;
        return f(x-1) + f(x-2);
    }

    Binary Search Using Recursion:
    ------------------------------
    int search(int target, int * arr) {
        if(lo>hi)
            return -1;
        int mid = (lo + hi) / 2;
        if (arr[mid] == target)
            return mid;
        if (arr[mid] < target) 
        return search(target, arr, mid, mid + hi)

    What is the runtime of that Recursive function?
    -----------------------------------------------
    T(N) = T(N/2) + T(N/2) + 3
    T(1) = 1
        -> *recurence relation*
    
    Iterative Substitution (Back Substitution):
        1) Repeatedly back sub
        2) Find General Form [hard part]
        3) find Terminating Values
        4) Plug in Terminating Values
    
    (Eg)
    (1)     T(N) = 2T(N/2) + 3                  s = 1
            T(N/2) = 2T(N/4) + 3
            T(N) = 2T(N/4) + 3
            T(N) = 2(2T(N/4) + 3) + 3
            T(N) = 4T(N/4) + 3(3)               s = 2
            T(N/4) = 2T(N/8) + 3
            T(N) = 4(2T(N/8) + 3) + 3(3)
                = 8T(N/8) + 7(3)                s = 3
            :       :         :                   :
            T(N) = 16T(N/16) + 15(3)            s = 4
            :       :         :                   :
    (2)     T(N) = 2^(k)T(N/2^k)+(2^k - 1)(3)   s = k

    (3)     N/2^k = 1
            N = 2^k
            log_2(N) = k

    (4)     T(N) = NT(1) + (N-1) + 3

    
    Towers of Hanoi:
        3 Towers
        64 Disks w/ unique radius
        Only 1 disk can be off the tower at a time
        Disks have to increase in order of size (larger on bottom)

        move all other disks to aux
        want to move biggest disk to end
        move all others to end from aux

        numMoves(N) = numMoves(N-1) + 1 + numMoves(N-1)
        :               :             :      :
        T(N) = 2^kT(N - k) + (2^k - 1)       s = k
                    N - k = 1
                    k = N - 1
        T(N) = 2^(N-1)T(1) + 2^(N-1) - 1
                :       :       :
             = 2^N - 1
        
        so....
            2^(64) -1 = 2 * 10^19

Permutations:
-------------
Row-doku
    [ | | 7 | | | | | 6 | ]
    place 1 - 9     no repeats allowed

    7!
    for (i = 1 -> 9)
        place i spot 0
        for (j = 1 -> 9)
            place j spot 1
            for (k = 1 -> 9)
                place k spot 2
                    :
                    :
                    :
                    :
                    :
                    : 

    Goal:
        for () ------------
        |   for ()        |     num of times
num - 1 |_______for ()    |
                    :
                    :

Sorting:
----------

Iterative Sorts:
-----------------
    ordered values
    benefits:
        - fast finding (many of these)
        - sweeps
        - Greedy
        - Geometry

    Sorting Algorithms:
        (1) Bogo Sort (useless) 

            while the array is unsorted
                randomly permute array

            *Worst Case* DNH
            *Best Case* Array is aleady sorted which is just O(N)
            *Avg Case*  O(N!)
        
        (2) Selection Sort
            build assorted array 1 element at a time

            for each spot in array
                find smallest unused value
                place value in first empty spot
            
            Σ(N)(i=1)  i = ((N+1)N)/2 ε Θ(N^2)

    Insertion Sort - Iterative Non-Recursive:
    ----------------------------------------
    [ 4 | 6 | 5 | 2 | 7 | 3 | 1 ]
    [4] insert 4 - maintain sorted order
    [4,6] insert 6
    [4,6,5] -> [4,5,6] insert 5 - must swap numbers around
    [4,5,6,2] -> [4,5,2,6] -> [4,2,5,6] -> [2,4,5,6] insert 2
    [2,4,5,6,7] insert 7
    [2,3,4,5,6,7] insert 3  = 4 Swaps
    [1,2,3,4,5,6,7] insert 1 = 6 swaps

        Best Case:
            1,2,3,...,n
            Oswaps
            O(N) compares
            Total Runtime = O(N)

        Worst case:
            n, n-1, n-2, ... , 1
            0 + 1 + 2 + ... + (n-1)
            (n-1)(n/2) ε Θ(n^2)
            compares = Θ(n^2)
            Total Runtime = θ(n^2)

        Avg Case:
            Total Runtime = Θ(n^2)

    Bubble Sort:
    ------------
    While array is not sorted
        sucep from the front to back
            swap out of order adjacent elements
    
        Best Case: Θ(N)
        Avg Case: Θ(N^2)   
        Worst Case: θ(N^2)

Recursive Sort:
-----------------
    Quick Sort- Tony Hoare:

    Quick Sort (arr, N)
        if (N <= 1) quit
        Obtain a Pivot Value
        smaller Values than Pivot go into SMALL.
        larger values than Pivot go into LARGE
        QuickSort(SMALL)
        QuickSort(LARGE)
        SMALL + Pivot + LARGE is resulting array 

    Best Case: 
        |SMALL| = |LARGE|  ; Q(1) = 1
        Q(N) = 2Q(N/2) + O(N) 
                = 2Q(N/2) + N
        ------------------
        s = 1 Q(N) = 2Q(N/2) + N 
                    2Q(N/2) = 2Q(N/4) + N/2   
        s = 2 Q(N) = 2(2Q(N/4) + N/2) + N
                = 4Q(N/4) + 2N
            :   :    : 
        s = k = 2^kQ(N/2^k) + K * N   

        Q(N) = NQ(1) + log_2(N) * N 
            N + Nlog_2(N)
        Runtime = Θ(Nlog(N))    

    Avg Case:
        Θ(Nlog(N))

    Worst Case Pivot: (min or max)
        Q(N) = N + Q(N-1)
        Q(N) = (N + N-1 Q(N-2))
          :      :   :
        Q(N) =Σ ι +  Q(N-K)

        = Θ(N^2)


    Merge Sort:
    -------------
        Psuedo Code:
            Split in half
            sort halves - merge sort on first half, merge sort on second half
            merge - (compare "first" values of array and take smaller)
            [8,7,2,4,5,3,6,1]
            [8,7,2,4][5,3,6,1]
             2,4,7,8  1,3,5,6
                :       :
        
        Best, Worst, and avg: O(NlogN)
            B       A       W      
Selection:  N^2     N^2     N^2
Insertion:  N       N^2     N^2 
Bubble:     N       N^2     N^2
Quick:      NlogN   NlogN   N^2
Merge:      NlogN   NlogN   NlogN

Bogo:       N               DNH




